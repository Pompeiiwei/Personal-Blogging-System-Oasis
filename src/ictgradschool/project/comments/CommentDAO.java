package ictgradschool.project.comments;

import java.sql.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class CommentDAO {

    public static List<Comment> getAllComments(Connection conn) throws SQLException {

        List<Comment> comments = new ArrayList<>();

        try (Statement stmt = conn.createStatement()) {

            try (ResultSet rs = stmt.executeQuery("SELECT * FROM comments")) {

                while (rs.next()) {

                    Comment comment = createCommentFromResultSet(rs);
                    comments.add(comment);
                }
            }
        }

        Collections.sort(comments);

        return comments;
    }


    public static Comment getCommentById(int comId, Connection conn) throws SQLException {

        List<Comment> comments = new ArrayList<>();

        try (PreparedStatement stmt = conn.prepareStatement(

                "SELECT * FROM comments WHERE comId = ?")) {

            stmt.setInt(1, comId);

            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    Comment comment = createCommentFromResultSet(rs);
                    comments.add(comment);
                }
            }

            if (comments.size() > 0) return comments.get(0);
            else {
                System.out.println("Not comment of id " + comId + " !");
                return null;
            }
        }
    }

    public static List<Comment> getCommentsByUserId(int userId, Connection conn) throws SQLException {

        List<Comment> comments = new ArrayList<>();

        try (PreparedStatement stmt = conn.prepareStatement(

                "SELECT * FROM comments WHERE userId = ?")) {

            stmt.setInt(1, userId);

            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    Comment comment = createCommentFromResultSet(rs);
                    comments.add(comment);
                }
            }

            if (comments.size() == 0) {
                System.out.println("No comment of the user " + userId + " !");
                return null;
            } else {
                return comments;
            }
        }
    }

    public static List<Comment> getCommentsByArtId(int artId, Connection conn) throws SQLException {

        List<Comment> comments = new ArrayList<>();

        try (PreparedStatement stmt = conn.prepareStatement(

                "SELECT * FROM comments WHERE artId = ?")) {

            stmt.setInt(1, artId);

            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    Comment comment = createCommentFromResultSet(rs);
                    comments.add(comment);
                }
            }

            if (comments.size() == 0) {
                return null;
            } else {
                return comments;
            }
        }
    }

    public static boolean insertComment(Comment comment, Connection conn) throws SQLException {

        try(PreparedStatement stmt = conn.prepareStatement(
                "INSERT INTO comments (userId, artId, comDate, comContent, username, parentId, hidden) VALUES (?,?,?,?,?,?,?)", Statement.RETURN_GENERATED_KEYS)){

            stmt.setInt(1, comment.getUserId());
            stmt.setInt(2, comment.getArtId());
            stmt.setString(3, comment.getComDate());
            stmt.setString(4, comment.getComContent());
            stmt.setString(5, comment.getUserName());
            stmt.setInt(6, comment.getParentId());
            stmt.setBoolean(7, comment.getHidden());

            int rowsAffected = stmt.executeUpdate(); // rowsAffected will be 1 if the insert was successful (because we're trying to insert 1 row), or 0 if it wasn't.

            if(rowsAffected == 0){  // If we didn't actually insert anything, we can't continue.v
                return false;
            }
            // This code will allow us to get the primary keys that were generated by the database.
            // These will be returned in a ResultSet with one column.
            // Each row will correspond to one generated key (in case we inserted multiple rows at once).
            // In this case, there will be only one row since we only inserted one lecturer.
            try(ResultSet keys = stmt.getGeneratedKeys()){
                keys.next(); //Move to the first row
                int artId = keys.getInt(1);
                comment.setArtId(artId);
                return  true;
            }
        }
    }


    public static void deleteComment(int comId, Connection conn) throws SQLException{
        findChildComment(comId, conn);
        try (PreparedStatement stmt = conn.prepareStatement(
                "DELETE FROM comments WHERE comId = ?")) {

            stmt.setInt(1, comId);

            int rowAffected = stmt.executeUpdate();
            if (rowAffected == 1) {
                System.out.println("Deleted successfully!");
            }
        }
    }

    public static void findChildComment(int comId, Connection conn) throws SQLException{
        try (PreparedStatement stmt = conn.prepareStatement(

                "SELECT comId FROM comments WHERE parentId = ?")) {

            stmt.setInt(1, comId);

            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    int childComId = rs.getInt(1);
                    deleteComment(childComId, conn);
                }
            }
        }
    }

    public static void deleteCommentByArtId(int artId, Connection conn) throws SQLException{

        try (PreparedStatement stmt = conn.prepareStatement(
                "DELETE FROM comments WHERE artId = ?")) {

            stmt.setInt(1, artId);

            int rowAffected = stmt.executeUpdate();
            if (rowAffected == 1) {
                System.out.println("Deleted successfully!");
            }
        }
    }

    public static void deleteCommentByUsername(String username, Connection conn) throws SQLException{

        try (PreparedStatement stmt = conn.prepareStatement(
                "SELECT * FROM comments WHERE username = ?")) {

            stmt.setString(1, username);
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    deleteComment(rs.getInt(1), conn);
                }
            }

        }
    }

    public static Comment createCommentFromResultSet(ResultSet rs) throws SQLException {
        Comment comment = new Comment(
                rs.getInt(1),
                rs.getInt(2),
                rs.getString(3),
                rs.getInt(4),
                rs.getString(5),
                rs.getString(6),
                rs.getInt(7),
                rs.getBoolean(8)
        );
        return comment;
    }
}